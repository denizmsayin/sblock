#ifndef DENIZMSAYIN_SBLOCK_SBPUZZLE_GENERATION_FACTORY_HPP
#define DENIZMSAYIN_SBLOCK_SBPUZZLE_GENERATION_FACTORY_HPP

#include <cmath>
#include <vector>
#include <random>
#include <string>
#include <unordered_map>
#include <functional>

#include "puzzle_fillers.hpp"

namespace denizmsayin::sblock::sbpuzzle::generation {

    enum class RandomGeneratorType {
        SHUFFLE,
        UNIFORM,
        SQRT
    };

    const std::vector<std::string> RANDOM_GENERATOR_STRINGS {
        "shuffle",
        "uniform",
        "sqrt"
    };

    const std::unordered_map<std::string, std::string> RANDOM_GENERATOR_DESCR_MAP {
        {"shuffle", "puzzles are generated by randomly shuffling tiles"},
        {"uniform", "a random amount of moves drawn from a uniform distribution "
                    "are applied to the goal state"},
        {"sqrt", "a random amount of moves drawn from distribution where each "
                 "number is weighted by its square root are applied to the "
                 "goal state"}
    };

    RandomGeneratorType str2randomgeneratortype(const std::string &s) {
        static const std::unordered_map<std::string, RandomGeneratorType> map {
            {"shuffle", RandomGeneratorType::SHUFFLE},
            {"uniform", RandomGeneratorType::UNIFORM},
            {"sqrt", RandomGeneratorType::SQRT}
        };
        return map.at(s);
    }

    inline double unity(double x) { return 1.0; }
    inline double msqrt(double x) { return sqrt(x); }

    template <class URNG, class OutputIterator>
    using RandomGeneratorFunction = std::function<void(size_t, URNG &, OutputIterator)>;

    template <psize_t H, psize_t W, class URNG, class OutputIterator, class WeightF>
    RandomGeneratorFunction<URNG, OutputIterator> make_scrambled_generator(
            int64_t distr_min,
            int64_t distr_max,
            WeightF f)
    {
        return [=](size_t n, URNG &r, OutputIterator o) {
            auto distr = make_offset_ddistr(distr_min, distr_max, f);
            fill_scrambled_puzzles<H, W>(n, r, o, distr);
        };
    }

    template <psize_t H, psize_t W, class URNG, class OutputIterator>
    RandomGeneratorFunction<URNG, OutputIterator> random_sbpuzzle_generator_factory(
            RandomGeneratorType type, 
            int64_t distr_min=0,
            int64_t distr_max=0) 
    {
        switch(type) {
            case RandomGeneratorType::SHUFFLE:  
                return [](size_t n, URNG &r, OutputIterator o) {
                    fill_shuffled_puzzles<H, W>(n, r, o);
                };
            case RandomGeneratorType::UNIFORM:
                return make_scrambled_generator<H, W, URNG, OutputIterator>
                       (distr_min, distr_max, unity);
            case RandomGeneratorType::SQRT:
                return make_scrambled_generator<H, W, URNG, OutputIterator>
                       (distr_min, distr_max, sqrt); // from cmath
            default:
                throw std::invalid_argument("Unknown random generator type argument in factory.");
        }
    }

}

#endif
